#!/usr/bin/env bash
# Sets up a lightweight graphical session exposed over websockify.
set -euo pipefail

PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:${PATH:-}"
export PATH

export DISPLAY=:1
LOG_DIR=/var/log/cmux
XVFB_LOG_FILE="${LOG_DIR}/xvfb.log"
X11VNC_LOG_FILE="${LOG_DIR}/x11vnc.log"
WEBSOCKIFY_LOG_FILE="${LOG_DIR}/websockify.log"
CHROME_LOG_FILE="${LOG_DIR}/chrome.log"
CDP_PORT=39381

mkdir -p "${LOG_DIR}"
touch \
  "${XVFB_LOG_FILE}" \
  "${X11VNC_LOG_FILE}" \
  "${WEBSOCKIFY_LOG_FILE}" \
  "${CHROME_LOG_FILE}"

start_process() {
  local log_file="$1"
  shift
  "$@" >>"${log_file}" 2>&1 &
  echo $!
}

cleanup() {
  local status=$?
  for pid in ${WEBSOCKIFY_PID:-} ${CHROME_PID:-} ${X11VNC_PID:-} ${XVFB_PID:-}; do
    if [[ -n "${pid:-}" ]] && kill -0 "$pid" >/dev/null 2>&1; then
      kill "$pid" >/dev/null 2>&1 || true
      wait "$pid" >/dev/null 2>&1 || true
    fi
  done
  exit "$status"
}
trap cleanup EXIT INT TERM

XVFB_PID=$(start_process "${XVFB_LOG_FILE}" /usr/bin/Xvfb :1 -screen 0 1920x1080x24 -nolisten tcp -noreset)

for _ in {1..30}; do
  if [[ -S /tmp/.X11-unix/X1 ]]; then
    break
  fi
  sleep 1
done

if [[ ! -S /tmp/.X11-unix/X1 ]]; then
  echo "Failed to start Xvfb display :1" >>"${XVFB_LOG_FILE}"
  exit 1
fi

# Set a solid background to avoid exposing other UI elements
env DISPLAY=:1 /usr/bin/xsetroot -solid '#000000'

X11VNC_PID=$(start_process "${X11VNC_LOG_FILE}" env DISPLAY=:1 /usr/bin/x11vnc -display :1 -forever -shared -rfbport 5901 -localhost -nopw -quiet)

CHROME_BIN="${CHROME_BIN:-/usr/bin/google-chrome-stable}"
if [[ ! -x "${CHROME_BIN}" ]]; then
  CHROME_BIN="$(command -v google-chrome-stable 2>/dev/null || true)"
fi
if [[ -z "${CHROME_BIN}" ]]; then
  CHROME_BIN="$(command -v chromium-browser 2>/dev/null || true)"
fi
if [[ -n "${CHROME_BIN}" && -x "${CHROME_BIN}" ]]; then
  export GOOGLE_API_KEY="cmux-local"
  export GOOGLE_DEFAULT_CLIENT_ID="cmux-local"
  export GOOGLE_DEFAULT_CLIENT_SECRET="cmux-local"
  mkdir -p /root/.config/chrome
  # Launch Chrome fullscreen while keeping the standard UI (tabs + omnibox)
  CHROME_FLAGS=(
    --no-sandbox
    --disable-dev-shm-usage
    --disable-gpu
    --disable-software-rasterizer
    --no-first-run
    --no-default-browser-check
    --disable-default-apps
    --disable-sync
    --disable-translate
    --disable-infobars
    --disable-features=ChromeWhatsNewUI,AutofillServerCommunication,AutomationControlled
    --remote-debugging-address=0.0.0.0
    --remote-debugging-port=${CDP_PORT}
    --remote-allow-origins=*
    --test-type
    --start-maximized
    --window-position=0,0
    --window-size=1920,1080
    --user-data-dir=/root/.config/chrome
    --password-store=basic
    about:blank
  )
  printf 'Launching Chrome via %s\n' "${CHROME_BIN}" >>"${CHROME_LOG_FILE}"
  CHROME_PID=$(start_process "${CHROME_LOG_FILE}" env DISPLAY=:1 HOME=/root "${CHROME_BIN}" "${CHROME_FLAGS[@]}")
  sleep 5
  if ! kill -0 "${CHROME_PID}" >/dev/null 2>&1; then
    printf 'Chrome process exited early\n' >>"${CHROME_LOG_FILE}"
    CHROME_PID=""
  fi
else
  echo "Chrome binary not found; skipping browser autostart" >>"${CHROME_LOG_FILE}"
fi

/usr/bin/websockify --web=/usr/share/novnc 0.0.0.0:39380 127.0.0.1:5901 >>"${WEBSOCKIFY_LOG_FILE}" 2>&1 &
WEBSOCKIFY_PID=$!
wait "$WEBSOCKIFY_PID"
