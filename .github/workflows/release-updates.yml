name: Build & Publish Electron Updates (GitHub Releases)

on:
  release:
    types: [published]
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - package.json
      - apps/client/package.json

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write

env:
  NODE_VERSION: "24"

jobs:
  mac-x64:
    name: macOS x64
    environment: electron
    runs-on: ${{ (vars.USE_LARGE_RUNNERS == 'true' && 'macos-13-large') || 'macos-13' }}
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'release' && github.event.release.tag_name || github.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21
      - name: Install dependencies (bun)
        run: bun install --frozen-lockfile
      - name: Install app deps in apps/client (bun)
        working-directory: apps/client
        run: bun install --frozen-lockfile
      - name: Ensure local production node_modules (apps/client)
        working-directory: apps/client
        run: |
          set -euo pipefail
          echo "Ensuring local node_modules in $(pwd)..."
          # First try a local bun install to materialize node_modules
          bun install --frozen-lockfile || true
          if [ ! -d node_modules ]; then
            echo "Local node_modules missing; copying from workspace root..."
            # Copy the hoisted workspace root node_modules into the app package
            # -L to dereference any symlinks so the packaged app has real files
            rsync -aL --delete ../../node_modules/ node_modules/ || true
          fi
          if [ ! -d node_modules ]; then
            echo "ERROR: apps/client/node_modules still missing after attempts." >&2
            exit 1
          fi
      - name: Write .env for build
        shell: bash
        run: |
          cat > .env <<EOF
          NEXT_PUBLIC_CONVEX_URL=${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
          NEXT_PUBLIC_STACK_PROJECT_ID=${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
          NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
          NEXT_PUBLIC_WWW_ORIGIN=${{ secrets.NEXT_PUBLIC_WWW_ORIGIN }}
          NEXT_PUBLIC_GITHUB_APP_SLUG=${{ secrets.NEXT_PUBLIC_GITHUB_APP_SLUG }}
          EOF
      - name: Build, sign, and notarize (x64) via publish script
        env:
          MAC_CERT_BASE64: ${{ secrets.MAC_CERT_BASE64 }}
          MAC_CERT_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
        run: bash scripts/publish-build-mac-x64.sh --skip-install
      - name: Publish notarized macOS x64 artifacts to GitHub Releases
        env:
          GH_TOKEN: ${{ github.token }}
        working-directory: apps/client
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          artifacts=(
            dist-electron/*.dmg
            dist-electron/*.zip
            dist-electron/latest-*.yml
            dist-electron/*.blockmap
          )
          if [[ ${#artifacts[@]} -eq 0 ]]; then
            echo "No notarized macOS x64 artifacts found in dist-electron" >&2
            exit 1
          fi
          release_tag="${{ github.event.release.tag_name }}"
          if [[ -z "$release_tag" ]]; then
            release_tag="${GITHUB_REF##*/}"
          fi
          repo="${{ github.repository }}"
          for artifact in "${artifacts[@]}"; do
            echo "Uploading $artifact to $repo@$release_tag"
            gh release upload "$release_tag" "$artifact" --repo "$repo" --clobber
          done

  mac-arm64:
    name: macOS arm64
    environment: electron
    runs-on: ${{ (vars.USE_LARGE_RUNNERS == 'true' && 'macos-14-xlarge') || 'macos-14' }}
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'release' && github.event.release.tag_name || github.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21
      - name: Install dependencies (bun)
        run: bun install --frozen-lockfile
      - name: Install app deps in apps/client (bun)
        working-directory: apps/client
        run: bun install --frozen-lockfile
      - name: Ensure local production node_modules (apps/client)
        working-directory: apps/client
        run: |
          set -euo pipefail
          echo "Ensuring local node_modules in $(pwd)..."
          # First try a local bun install to materialize node_modules
          bun install --frozen-lockfile || true
          if [ ! -d node_modules ]; then
            echo "Local node_modules missing; copying from workspace root..."
            # Copy the hoisted workspace root node_modules into the app package
            # -L to dereference any symlinks so the packaged app has real files
            rsync -aL --delete ../../node_modules/ node_modules/ || true
          fi
          if [ ! -d node_modules ]; then
            echo "ERROR: apps/client/node_modules still missing after attempts." >&2
            exit 1
          fi
      - name: Write .env for build
        shell: bash
        run: |
          cat > .env <<EOF
          NEXT_PUBLIC_CONVEX_URL=${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
          NEXT_PUBLIC_STACK_PROJECT_ID=${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
          NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
          NEXT_PUBLIC_WWW_ORIGIN=${{ secrets.NEXT_PUBLIC_WWW_ORIGIN }}
          NEXT_PUBLIC_GITHUB_APP_SLUG=${{ secrets.NEXT_PUBLIC_GITHUB_APP_SLUG }}
          EOF
      - name: Build, sign, and notarize (arm64) via publish script
        env:
          MAC_CERT_BASE64: ${{ secrets.MAC_CERT_BASE64 }}
          MAC_CERT_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
        run: bash scripts/publish-build-mac-arm64.sh --skip-install
      - name: Publish notarized macOS arm64 artifacts to GitHub Releases
        env:
          GH_TOKEN: ${{ github.token }}
        working-directory: apps/client
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          artifacts=(
            dist-electron/*.dmg
            dist-electron/*.zip
            dist-electron/latest-*.yml
            dist-electron/*.blockmap
          )
          if [[ ${#artifacts[@]} -eq 0 ]]; then
            echo "No notarized macOS arm64 artifacts found in dist-electron" >&2
            exit 1
          fi
          release_tag="${{ github.event.release.tag_name }}"
          if [[ -z "$release_tag" ]]; then
            release_tag="${GITHUB_REF##*/}"
          fi
          repo="${{ github.repository }}"
          for artifact in "${artifacts[@]}"; do
            echo "Uploading $artifact to $repo@$release_tag"
            gh release upload "$release_tag" "$artifact" --repo "$repo" --clobber
          done

  windows-x64:
    name: Windows x64
    environment: electron
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'release' && github.event.release.tag_name || github.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21
      - name: Install dependencies (bun)
        run: bun install --frozen-lockfile
      - name: Write .env for build
        shell: bash
        run: |
          cat > .env <<EOF
          NEXT_PUBLIC_CONVEX_URL=${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
          NEXT_PUBLIC_STACK_PROJECT_ID=${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
          NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
          NEXT_PUBLIC_WWW_ORIGIN=${{ secrets.NEXT_PUBLIC_WWW_ORIGIN }}
          NEXT_PUBLIC_GITHUB_APP_SLUG=${{ secrets.NEXT_PUBLIC_GITHUB_APP_SLUG }}
          EOF
      - name: Generate icons
        working-directory: apps/client
        run: bun run ./scripts/generate-icons.mjs
      - name: Build & publish Windows x64 to GitHub Releases
        env:
          GH_TOKEN: ${{ github.token }}
          PUBLISH_FLAG: ${{ github.event_name == 'release' && 'always' || 'never' }}
        working-directory: apps/client
        run: bunx electron-vite build -c electron.vite.config.ts && bunx electron-builder --config electron-builder.json --win --x64 --publish always --config.publish.provider=github --config.publish.owner="${{ github.repository_owner }}" --config.publish.repo="${{ github.event.repository.name }}"

  linux-x64:
    name: Linux x64
    environment: electron
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'release' && github.event.release.tag_name || github.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21
      - name: Install dependencies (bun)
        run: bun install --frozen-lockfile
      - name: Write .env for build
        shell: bash
        run: |
          cat > .env <<EOF
          NEXT_PUBLIC_CONVEX_URL=${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
          NEXT_PUBLIC_STACK_PROJECT_ID=${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
          NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
          NEXT_PUBLIC_WWW_ORIGIN=${{ secrets.NEXT_PUBLIC_WWW_ORIGIN }}
          NEXT_PUBLIC_GITHUB_APP_SLUG=${{ secrets.NEXT_PUBLIC_GITHUB_APP_SLUG }}
          EOF
      - name: Generate icons
        working-directory: apps/client
        run: bun run ./scripts/generate-icons.mjs
      - name: Build & publish Linux AppImage x64 to GitHub Releases
        env:
          GH_TOKEN: ${{ github.token }}
          PUBLISH_FLAG: ${{ github.event_name == 'release' && 'always' || 'never' }}
        working-directory: apps/client
        run: bunx electron-vite build -c electron.vite.config.ts && bunx electron-builder --config electron-builder.json --linux AppImage --x64 --publish always --config.publish.provider=github --config.publish.owner="${{ github.repository_owner }}" --config.publish.repo="${{ github.event.repository.name }}"