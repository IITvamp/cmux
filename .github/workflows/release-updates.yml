name: Build & Publish Electron Updates (GitHub Releases)

on:
  release:
    types: [published]
  workflow_dispatch:

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write

env:
  NODE_VERSION: "24"

jobs:
  mac-x64:
    name: macOS x64
    environment: electron
    runs-on: ${{ (vars.USE_LARGE_RUNNERS == 'true' && 'macos-13-large') || 'macos-13' }}
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21

      - name: Install dependencies (bun)
        run: bun install --frozen-lockfile

      - name: Write .env for build
        shell: bash
        run: |
          cat > .env <<EOF
          NEXT_PUBLIC_CONVEX_URL=${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
          NEXT_PUBLIC_STACK_PROJECT_ID=${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
          NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
          NEXT_PUBLIC_WWW_ORIGIN=${{ secrets.NEXT_PUBLIC_WWW_ORIGIN }}
          NEXT_PUBLIC_GITHUB_APP_SLUG=${{ secrets.NEXT_PUBLIC_GITHUB_APP_SLUG }}
          EOF

      - name: Generate icons
        working-directory: apps/client
        run: bun run ./scripts/generate-icons.mjs

      - name: Build mac app via local script (x64)
        run: bash scripts/build-electron-local.sh

      - name: Detect mac signing secrets
        id: signing
        env:
          MAC_CERT_BASE64: ${{ secrets.MAC_CERT_BASE64 }}
          MAC_CERT_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          set -euo pipefail
          has=true
          for k in MAC_CERT_BASE64 MAC_CERT_PASSWORD APPLE_ID APPLE_APP_SPECIFIC_PASSWORD APPLE_TEAM_ID; do
            if [ -z "${!k:-}" ]; then has=false; fi
          done
          echo "has=$has" >> "$GITHUB_OUTPUT"

      - name: Prepare mac signing cert (x64)
        if: ${{ steps.signing.outputs.has == 'true' }}
        env:
          MAC_CERT_BASE64: ${{ secrets.MAC_CERT_BASE64 }}
        run: |
          set -euo pipefail
          CERT_PATH="$RUNNER_TEMP/mac_signing_cert.p12"
          node -e "process.stdout.write(Buffer.from(process.env.MAC_CERT_BASE64,'base64'))" > "$CERT_PATH"
          echo "CSC_LINK=$CERT_PATH" >> "$GITHUB_ENV"

      - name: Build & publish mac x64 (signed) to GitHub Releases
        if: ${{ steps.signing.outputs.has == 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
          # Do NOT set CSC_IDENTITY_AUTO_DISCOVERY=false here; it can suppress signing.
          CSC_LINK: ${{ env.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          DEBUG: electron-osx-sign*,electron-notarize*
        working-directory: apps/client
        run: |
          bunx electron-builder \
            --config electron-builder.json \
            --mac dmg zip --x64 \
            --publish always \
            --config.mac.forceCodeSigning=true \
            --config.dmg.sign=false \
            --config.publish.provider=github \
            --config.publish.owner="${{ github.repository_owner }}" \
            --config.publish.repo="${{ github.event.repository.name }}"

      - name: Staple & verify (x64)
        if: ${{ steps.signing.outputs.has == 'true' }}
        working-directory: apps/client/dist
        run: |
          set -euo pipefail
          APP="$(ls -1d mac*/**/*.app 2>/dev/null | head -n1 || true)"
          DMG="$(ls -1 *.dmg 2>/dev/null | head -n1 || true)"
          if [ -n "$APP" ]; then
            xcrun stapler staple "$APP" || true
            xcrun stapler validate "$APP"
            spctl -a -t exec -vv "$APP"
          fi
          if [ -n "$DMG" ]; then
            xcrun stapler staple "$DMG" || true
            xcrun stapler validate "$DMG" || true
            spctl -a -t open -vv "$DMG"
          fi

      - name: Build & publish mac x64 (unsigned) to GitHub Releases
        if: ${{ steps.signing.outputs.has != 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
          CSC_IDENTITY_AUTO_DISCOVERY: 'false'
        working-directory: apps/client
        run: |
          bunx electron-builder \
            --config electron-builder.json \
            --mac dmg zip --x64 \
            --publish always \
            --config.mac.identity=null \
            --config.dmg.sign=false \
            --config.publish.provider=github \
            --config.publish.owner="${{ github.repository_owner }}" \
            --config.publish.repo="${{ github.event.repository.name }}"

  mac-arm64:
    name: macOS arm64
    environment: electron
    runs-on: ${{ (vars.USE_LARGE_RUNNERS == 'true' && 'macos-14-xlarge') || 'macos-14' }}
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21

      - name: Install dependencies (bun)
        run: bun install --frozen-lockfile

      - name: Write .env for build
        shell: bash
        run: |
          cat > .env <<EOF
          NEXT_PUBLIC_CONVEX_URL=${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
          NEXT_PUBLIC_STACK_PROJECT_ID=${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
          NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
          NEXT_PUBLIC_WWW_ORIGIN=${{ secrets.NEXT_PUBLIC_WWW_ORIGIN }}
          NEXT_PUBLIC_GITHUB_APP_SLUG=${{ secrets.NEXT_PUBLIC_GITHUB_APP_SLUG }}
          EOF

      - name: Generate icons
        working-directory: apps/client
        run: bun run ./scripts/generate-icons.mjs

      - name: Build mac app via local script (arm64)
        run: bash scripts/build-electron-local.sh

      - name: Detect mac signing secrets
        id: signing_arm
        env:
          MAC_CERT_BASE64: ${{ secrets.MAC_CERT_BASE64 }}
          MAC_CERT_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          set -euo pipefail
          has=true
          for k in MAC_CERT_BASE64 MAC_CERT_PASSWORD APPLE_ID APPLE_APP_SPECIFIC_PASSWORD APPLE_TEAM_ID; do
            if [ -z "${!k:-}" ]; then has=false; fi
          done
          echo "has=$has" >> "$GITHUB_OUTPUT"

      - name: Prepare mac signing cert (arm64)
        if: ${{ steps.signing_arm.outputs.has == 'true' }}
        env:
          MAC_CERT_BASE64: ${{ secrets.MAC_CERT_BASE64 }}
        run: |
          set -euo pipefail
          CERT_PATH="$RUNNER_TEMP/mac_signing_cert.p12"
          node -e "process.stdout.write(Buffer.from(process.env.MAC_CERT_BASE64,'base64'))" > "$CERT_PATH"
          echo "CSC_LINK=$CERT_PATH" >> "$GITHUB_ENV"

      - name: Build & publish mac arm64 (signed) to GitHub Releases
        if: ${{ steps.signing_arm.outputs.has == 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
          CSC_LINK: ${{ env.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          DEBUG: electron-osx-sign*,electron-notarize*
        working-directory: apps/client
        run: |
          bunx electron-builder \
            --config electron-builder.json \
            --mac dmg zip --arm64 \
            --publish always \
            --config.mac.forceCodeSigning=true \
            --config.dmg.sign=false \
            --config.publish.provider=github \
            --config.publish.owner="${{ github.repository_owner }}" \
            --config.publish.repo="${{ github.event.repository.name }}"

      - name: Staple & verify (arm64)
        if: ${{ steps.signing_arm.outputs.has == 'true' }}
        working-directory: apps/client/dist
        run: |
          set -euo pipefail
          APP="$(ls -1d mac*/**/*.app 2>/dev/null | head -n1 || true)"
          DMG="$(ls -1 *.dmg 2>/dev/null | head -n1 || true)"
          if [ -n "$APP" ]; then
            xcrun stapler staple "$APP" || true
            xcrun stapler validate "$APP"
            spctl -a -t exec -vv "$APP"
          fi
          if [ -n "$DMG" ]; then
            xcrun stapler staple "$DMG" || true
            xcrun stapler validate "$DMG" || true
            spctl -a -t open -vv "$DMG"
          fi

      - name: Build & publish mac arm64 (unsigned) to GitHub Releases
        if: ${{ steps.signing_arm.outputs.has != 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
          CSC_IDENTITY_AUTO_DISCOVERY: 'false'
        working-directory: apps/client
        run: |
          bunx electron-builder \
            --config electron-builder.json \
            --mac dmg zip --arm64 \
            --publish always \
            --config.mac.identity=null \
            --config.dmg.sign=false \
            --config.publish.provider=github \
            --config.publish.owner="${{ github.repository_owner }}" \
            --config.publish.repo="${{ github.event.repository.name }}"

  windows-x64:
    name: Windows x64
    environment: electron
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21
      - name: Install dependencies (bun)
        run: bun install --frozen-lockfile
      - name: Write .env for build
        shell: bash
        run: |
          cat > .env <<EOF
          NEXT_PUBLIC_CONVEX_URL=${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
          NEXT_PUBLIC_STACK_PROJECT_ID=${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
          NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
          NEXT_PUBLIC_WWW_ORIGIN=${{ secrets.NEXT_PUBLIC_WWW_ORIGIN }}
          NEXT_PUBLIC_GITHUB_APP_SLUG=${{ secrets.NEXT_PUBLIC_GITHUB_APP_SLUG }}
          EOF
      - name: Generate icons
        working-directory: apps/client
        run: bun run ./scripts/generate-icons.mjs
      - name: Build & publish Windows x64 to GitHub Releases
        env:
          GH_TOKEN: ${{ github.token }}
        working-directory: apps/client
        run: bunx electron-vite build -c electron.vite.config.ts && bunx electron-builder --config electron-builder.json --win --x64 --publish always --config.publish.provider=github --config.publish.owner="${{ github.repository_owner }}" --config.publish.repo="${{ github.event.repository.name }}"

  linux-x64:
    name: Linux x64
    environment: electron
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21
      - name: Install dependencies (bun)
        run: bun install --frozen-lockfile
      - name: Write .env for build
        shell: bash
        run: |
          cat > .env <<EOF
          NEXT_PUBLIC_CONVEX_URL=${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
          NEXT_PUBLIC_STACK_PROJECT_ID=${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
          NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
          NEXT_PUBLIC_WWW_ORIGIN=${{ secrets.NEXT_PUBLIC_WWW_ORIGIN }}
          NEXT_PUBLIC_GITHUB_APP_SLUG=${{ secrets.NEXT_PUBLIC_GITHUB_APP_SLUG }}
          EOF
      - name: Generate icons
        working-directory: apps/client
        run: bun run ./scripts/generate-icons.mjs
      - name: Build & publish Linux AppImage x64 to GitHub Releases
        env:
          GH_TOKEN: ${{ github.token }}
        working-directory: apps/client
        run: bunx electron-vite build -c electron.vite.config.ts && bunx electron-builder --config electron-builder.json --linux AppImage --x64 --publish always --config.publish.provider=github --config.publish.owner="${{ github.repository_owner }}" --config.publish.repo="${{ github.event.repository.name }}"
