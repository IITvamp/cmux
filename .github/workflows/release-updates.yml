name: Build & Publish Electron Updates (GitHub Releases)

on:
  release:
    types: [published]
  workflow_dispatch:

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write

env:
  NODE_VERSION: "24"

jobs:
  mac-x64:
    name: macOS x64
    environment: electron
    runs-on: ${{ (vars.USE_LARGE_RUNNERS == 'true' && 'macos-13-large') || 'macos-13' }}
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21
      - name: Install dependencies (bun)
        run: bun install --frozen-lockfile
      - name: Write .env for build
        shell: bash
        run: |
          cat > .env <<EOF
          NEXT_PUBLIC_CONVEX_URL=${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
          NEXT_PUBLIC_STACK_PROJECT_ID=${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
          NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
          NEXT_PUBLIC_WWW_ORIGIN=${{ secrets.NEXT_PUBLIC_WWW_ORIGIN }}
          NEXT_PUBLIC_GITHUB_APP_SLUG=${{ secrets.NEXT_PUBLIC_GITHUB_APP_SLUG }}
          EOF
      - name: Generate icons
        working-directory: apps/client
        run: bun run ./scripts/generate-icons.mjs
      - name: Prepare macOS entitlements
        run: bash scripts/prepare-macos-entitlements.sh
      - name: Build mac app via prod script (x64)
        run: bash scripts/build-electron-prod.sh
      - name: Detect mac signing secrets
        id: signing
        env:
          MAC_CERT_BASE64: ${{ secrets.MAC_CERT_BASE64 }}
          MAC_CERT_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY}}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER}}
        run: |
          has=true
          for k in MAC_CERT_BASE64 MAC_CERT_PASSWORD APPLE_API_KEY APPLE_API_KEY_ID APPLE_API_ISSUER; do
            if [ -z "${!k:-}" ]; then has=false; fi
          done
          echo "has=$has" >> "$GITHUB_OUTPUT"
      - name: Prepare mac signing cert (x64)
        if: ${{ steps.signing.outputs.has == 'true' }}
        env:
          MAC_CERT_BASE64: ${{ secrets.MAC_CERT_BASE64 }}
        run: |
          CERT_PATH="$RUNNER_TEMP/mac_signing_cert.p12"
          node -e "process.stdout.write(Buffer.from(process.env.MAC_CERT_BASE64,'base64'))" > "$CERT_PATH"
          echo "CSC_LINK=$CERT_PATH" >> "$GITHUB_ENV"
      - name: Prepare Apple API key file (x64)
        if: ${{ steps.signing.outputs.has == 'true' }}
        env:
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        run: |
          KEY_PATH="$RUNNER_TEMP/AuthKey_${APPLE_API_KEY_ID}.p8"
          printf "%s" "$APPLE_API_KEY" | perl -0777 -pe 's/\r\n|\r|\n/\n/g' > "$KEY_PATH"
          echo "APPLE_API_KEY=$KEY_PATH" >> "$GITHUB_ENV"
      - name: Build mac x64 (signed; no auto-notarize)
        if: ${{ steps.signing.outputs.has == 'true' }}
        env:
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
        working-directory: apps/client
        run: |
          bunx electron-builder \
            --config electron-builder.json \
            --mac dmg zip --x64 \
            --publish never \
            --config.mac.forceCodeSigning=true \
            --config.mac.entitlements="${{ github.workspace }}/apps/client/build/entitlements.mac.plist" \
            --config.mac.entitlementsInherit="${{ github.workspace }}/apps/client/build/entitlements.mac.plist" \
            --config.mac.notarize=false
      - name: Manually notarize with xcrun notarytool (x64)
        if: ${{ steps.signing.outputs.has == 'true' }}
        working-directory: apps/client/dist-electron
        env:
          APPLE_API_KEY: ${{ env.APPLE_API_KEY }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
        run: |
          set -e
          echo "notarytool: $(xcrun notarytool --version 2>/dev/null || echo 'not found')"
          ARTIFACT=""
          if compgen -G "*.dmg" > /dev/null; then
            ARTIFACT="$(ls -1 *.dmg | head -n1)"
            echo "Submitting DMG: $ARTIFACT"
          else
            APP_PATH="$(ls -1d mac*/**/*.app 2>/dev/null | head -n1 || true)"
            if [ -n "$APP_PATH" ]; then
              ARTIFACT="$(basename "${APP_PATH%.app}").zip"
              echo "Zipping .app with ditto: $APP_PATH -> $ARTIFACT"
              (cd "$(dirname "$APP_PATH")" && ditto -c -k --sequesterRsrc --keepParent "$(basename "$APP_PATH")" "$PWD/$ARTIFACT")
            fi
          fi
          if [ -n "$ARTIFACT" ]; then
            set +e
            OUT=$(xcrun notarytool submit "$ARTIFACT" --wait --key "$APPLE_API_KEY" --key-id "$APPLE_API_KEY_ID" --issuer "$APPLE_API_ISSUER" 2>&1)
            CODE=$?
            set -e
            printf '%s\n' "$OUT" | sed -e 's/^/notarytool: /'
            if [ $CODE -eq 0 ] && printf '%s' "$OUT" | grep -qi 'Accepted'; then
              echo "Notarization accepted"
            else
              echo "Notarization did not report Accepted (exit $CODE). Attempting log fetch..." >&2
              SUBMISSION_ID=$(printf '%s' "$OUT" | sed -n 's/.*"id"[[:space:]]*:[[:space:]]*"\([^"]\+\)".*/\1/p' | head -n1)
              if [ -n "$SUBMISSION_ID" ]; then
                xcrun notarytool log "$SUBMISSION_ID" --key "$APPLE_API_KEY" --key-id "$APPLE_API_KEY_ID" --issuer "$APPLE_API_ISSUER" --output-format text || true
              fi
              exit 1
            fi
          else
            echo "No DMG or .app found to notarize" >&2
            exit 1
          fi
      - name: Staple & verify (x64)
        if: ${{ steps.signing.outputs.has == 'true' }}
        working-directory: apps/client/dist-electron
        run: |
          APP="$(ls -1d mac*/**/*.app 2>/dev/null | head -n1 || true)"
          DMG="$(ls -1 *.dmg 2>/dev/null | head -n1 || true)"
          if [ -n "$APP" ]; then
            xcrun stapler staple "$APP" || true
            xcrun stapler validate "$APP"
            spctl -a -t exec -vv "$APP"
          fi
          if [ -n "$DMG" ]; then
            xcrun stapler staple "$DMG" || true
            xcrun stapler validate "$DMG" || true
            spctl -a -t open -vv "$DMG"
          fi

  mac-arm64:
    name: macOS arm64
    environment: electron
    runs-on: ${{ (vars.USE_LARGE_RUNNERS == 'true' && 'macos-14-xlarge') || 'macos-14' }}
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21
      - name: Write .env for build
        shell: bash
        run: |
          cat > .env <<EOF
          NEXT_PUBLIC_CONVEX_URL=${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
          NEXT_PUBLIC_STACK_PROJECT_ID=${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
          NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
          NEXT_PUBLIC_WWW_ORIGIN=${{ secrets.NEXT_PUBLIC_WWW_ORIGIN }}
          NEXT_PUBLIC_GITHUB_APP_SLUG=${{ secrets.NEXT_PUBLIC_GITHUB_APP_SLUG }}
          EOF
      - name: Build, sign, and notarize (arm64) via script
        env:
          MAC_CERT_BASE64: ${{ secrets.MAC_CERT_BASE64 }}
          MAC_CERT_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
        run: |
          bash scripts/build-prod-mac-arm64.sh --skip-install

  windows-x64:
    name: Windows x64
    environment: electron
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21
      - name: Install dependencies (bun)
        run: bun install --frozen-lockfile
      - name: Write .env for build
        shell: bash
        run: |
          cat > .env <<EOF
          NEXT_PUBLIC_CONVEX_URL=${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
          NEXT_PUBLIC_STACK_PROJECT_ID=${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
          NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
          NEXT_PUBLIC_WWW_ORIGIN=${{ secrets.NEXT_PUBLIC_WWW_ORIGIN }}
          NEXT_PUBLIC_GITHUB_APP_SLUG=${{ secrets.NEXT_PUBLIC_GITHUB_APP_SLUG }}
          EOF
      - name: Generate icons
        working-directory: apps/client
        run: bun run ./scripts/generate-icons.mjs
      - name: Build & publish Windows x64 to GitHub Releases
        env:
          GH_TOKEN: ${{ github.token }}
        working-directory: apps/client
        run: bunx electron-vite build -c electron.vite.config.ts && bunx electron-builder --config electron-builder.json --win --x64 --publish always --config.publish.provider=github --config.publish.owner="${{ github.repository_owner }}" --config.publish.repo="${{ github.event.repository.name }}"

  linux-x64:
    name: Linux x64
    environment: electron
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21
      - name: Install dependencies (bun)
        run: bun install --frozen-lockfile
      - name: Write .env for build
        shell: bash
        run: |
          cat > .env <<EOF
          NEXT_PUBLIC_CONVEX_URL=${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
          NEXT_PUBLIC_STACK_PROJECT_ID=${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
          NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
          NEXT_PUBLIC_WWW_ORIGIN=${{ secrets.NEXT_PUBLIC_WWW_ORIGIN }}
          NEXT_PUBLIC_GITHUB_APP_SLUG=${{ secrets.NEXT_PUBLIC_GITHUB_APP_SLUG }}
          EOF
      - name: Generate icons
        working-directory: apps/client
        run: bun run ./scripts/generate-icons.mjs
      - name: Build & publish Linux AppImage x64 to GitHub Releases
        env:
          GH_TOKEN: ${{ github.token }}
        working-directory: apps/client
        run: bunx electron-vite build -c electron.vite.config.ts && bunx electron-builder --config electron-builder.json --linux AppImage --x64 --publish always --config.publish.provider=github --config.publish.owner="${{ github.repository_owner }}" --config.publish.repo="${{ github.event.repository.name }}"
