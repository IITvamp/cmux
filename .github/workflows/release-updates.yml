name: Build & Publish Electron Updates (GitHub Releases)

on:
  release:
    types: [published]
  workflow_dispatch:

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write

env:
  NODE_VERSION: '24'
  # Frontend build-time envs (exposed in bundle). Store values as GitHub Secrets.
  NEXT_PUBLIC_CONVEX_URL: ${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
  NEXT_PUBLIC_STACK_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
  NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY: ${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}

jobs:
  mac-x64:
    name: macOS x64
    runs-on: macos-13
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: pnpm/action-setup@v4
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Ensure pnpm lock visible to electron-builder
        shell: bash
        run: cp pnpm-lock.yaml apps/client/pnpm-lock.yaml
      - name: Detect mac signing secrets
        id: signing
        env:
          MAC_CERT_BASE64: ${{ secrets.MAC_CERT_BASE64 }}
          MAC_CERT_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          set -euo pipefail
          has=true
          for k in MAC_CERT_BASE64 MAC_CERT_PASSWORD APPLE_ID APPLE_APP_SPECIFIC_PASSWORD APPLE_TEAM_ID; do
            if [ -z "${!k:-}" ]; then has=false; fi
          done
          echo "has=$has" >> "$GITHUB_OUTPUT"
      - name: Build & publish mac x64 (signed) to GitHub Releases
        if: ${{ steps.signing.outputs.has == 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
          CSC_IDENTITY_AUTO_DISCOVERY: 'false'
          # macOS code signing + notarization
          CSC_LINK: base64:${{ secrets.MAC_CERT_BASE64 }}
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        working-directory: apps/client
        run: |
          pnpm exec electron-vite build -c electron.vite.config.js
          pnpm exec electron-builder --config electron-builder.json --mac --x64 --publish always --config.publish.provider=github --config.publish.owner="${{ github.repository_owner }}" --config.publish.repo="${{ github.event.repository.name }}"
      - name: Build & publish mac x64 (unsigned) to GitHub Releases
        if: ${{ steps.signing.outputs.has != 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
          CSC_IDENTITY_AUTO_DISCOVERY: 'false'
        working-directory: apps/client
        run: pnpm exec electron-vite build -c electron.vite.config.js && pnpm exec electron-builder --config electron-builder.json --mac dmg --x64 --publish always --config.mac.identity=null --config.publish.provider=github --config.publish.owner="${{ github.repository_owner }}" --config.publish.repo="${{ github.event.repository.name }}"

  mac-arm64:
    name: macOS arm64
    runs-on: macos-14
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: pnpm/action-setup@v4
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Ensure pnpm lock visible to electron-builder
        shell: bash
        run: cp pnpm-lock.yaml apps/client/pnpm-lock.yaml
      - name: Detect mac signing secrets
        id: signing
        env:
          MAC_CERT_BASE64: ${{ secrets.MAC_CERT_BASE64 }}
          MAC_CERT_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          set -euo pipefail
          has=true
          for k in MAC_CERT_BASE64 MAC_CERT_PASSWORD APPLE_ID APPLE_APP_SPECIFIC_PASSWORD APPLE_TEAM_ID; do
            if [ -z "${!k:-}" ]; then has=false; fi
          done
          echo "has=$has" >> "$GITHUB_OUTPUT"
      - name: Build & publish mac arm64 (signed) to GitHub Releases
        if: ${{ steps.signing.outputs.has == 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
          CSC_IDENTITY_AUTO_DISCOVERY: 'false'
          # macOS code signing + notarization
          CSC_LINK: base64:${{ secrets.MAC_CERT_BASE64 }}
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        working-directory: apps/client
        run: |
          pnpm exec electron-vite build -c electron.vite.config.js
          pnpm exec electron-builder --config electron-builder.json --mac --arm64 --publish always --config.publish.provider=github --config.publish.owner="${{ github.repository_owner }}" --config.publish.repo="${{ github.event.repository.name }}"
      - name: Build & publish mac arm64 (unsigned) to GitHub Releases
        if: ${{ steps.signing.outputs.has != 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
          CSC_IDENTITY_AUTO_DISCOVERY: 'false'
        working-directory: apps/client
        run: pnpm exec electron-vite build -c electron.vite.config.js && pnpm exec electron-builder --config electron-builder.json --mac dmg --arm64 --publish always --config.mac.identity=null --config.publish.provider=github --config.publish.owner="${{ github.repository_owner }}" --config.publish.repo="${{ github.event.repository.name }}"

  windows-x64:
    name: Windows x64
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: pnpm/action-setup@v4
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Ensure pnpm lock visible to electron-builder
        shell: bash
        run: cp pnpm-lock.yaml apps/client/pnpm-lock.yaml
      - name: Build & publish Windows x64 to GitHub Releases
        env:
          GH_TOKEN: ${{ github.token }}
          # Windows code signing (optional). Uncomment and provide secrets
          # to enable signed installers and reduce SmartScreen warnings.
          # WIN_CSC_LINK: base64:${{ secrets.WIN_CERT_BASE64 }}
          # WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CERT_PASSWORD }}
          # CSC_LINK: base64:${{ secrets.WIN_CERT_BASE64 }}
          # CSC_KEY_PASSWORD: ${{ secrets.WIN_CERT_PASSWORD }}
        working-directory: apps/client
        run: pnpm exec electron-vite build -c electron.vite.config.js && pnpm exec electron-builder --config electron-builder.json --win --x64 --publish always --config.publish.provider=github --config.publish.owner="${{ github.repository_owner }}" --config.publish.repo="${{ github.event.repository.name }}"

  linux-x64:
    name: Linux x64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: pnpm/action-setup@v4
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Ensure pnpm lock visible to electron-builder
        shell: bash
        run: cp pnpm-lock.yaml apps/client/pnpm-lock.yaml
      - name: Build & publish Linux AppImage x64 to GitHub Releases
        env:
          GH_TOKEN: ${{ github.token }}
        working-directory: apps/client
        run: pnpm exec electron-vite build -c electron.vite.config.js && pnpm exec electron-builder --config electron-builder.json --linux AppImage --x64 --publish always --config.publish.provider=github --config.publish.owner="${{ github.repository_owner }}" --config.publish.repo="${{ github.event.repository.name }}"
        
