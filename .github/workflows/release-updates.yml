name: Build & Publish Electron Updates (GitHub Releases)

on:
  release:
    types: [published]
  workflow_dispatch:

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write

env:
  NODE_VERSION: '24'

jobs:
  mac-x64:
    name: macOS x64
    environment: electron
    runs-on: macos-13
    env:
      # Frontend build-time envs (exposed in bundle). Environment-scoped secrets
      # are only available within jobs that declare the environment.
      NEXT_PUBLIC_CONVEX_URL: ${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
      NEXT_PUBLIC_STACK_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
      NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY: ${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
      NEXT_PUBLIC_WWW_ORIGIN: ${{ secrets.NEXT_PUBLIC_WWW_ORIGIN }}
      NEXT_PUBLIC_GITHUB_APP_SLUG: ${{ secrets.NEXT_PUBLIC_GITHUB_APP_SLUG }}
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Check for prebuilt mac x64 assets on release
        id: prebuilt
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          RELEASE_ID: ${{ github.event.release.id }}
        run: |
          set -euo pipefail
          node <<'NODE'
          const fs = require('node:fs');
          const token = process.env.GH_TOKEN;
          const owner = process.env.OWNER;
          const repo = process.env.REPO;
          const releaseId = process.env.RELEASE_ID;
          const out = process.env.GITHUB_OUTPUT;
          (async () => {
            const res = await fetch(`https://api.github.com/repos/${owner}/${repo}/releases/${releaseId}/assets`, {
              headers: {
                Authorization: `Bearer ${token}`,
                'X-GitHub-Api-Version': '2022-11-28',
                'Accept': 'application/vnd.github+json',
              },
            });
            if (!res.ok) {
              throw new Error(`Failed to list assets: ${res.status} ${res.statusText}`);
            }
            const assets = await res.json();
            const names = assets.map((a) => a.name);
            const hasYml = names.includes('latest-mac.yml');
            const hasPkg = names.some((n) => (n.endsWith('.dmg') || n.endsWith('.zip')) && !n.includes('arm64'));
            const has = hasYml && hasPkg;
            fs.appendFileSync(out, `has=${has}\n`);
          })().catch((e) => { console.error(e); process.exit(1); });
          NODE
      # Use Bun for installs and tooling
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21
      - name: Install dependencies (bun)
        if: ${{ steps.prebuilt.outputs.has != 'true' }}
        run: bun install --frozen-lockfile
      - name: Write .env for build
        if: ${{ steps.prebuilt.outputs.has != 'true' }}
        shell: bash
        run: |
          cat > .env <<EOF
          NEXT_PUBLIC_CONVEX_URL=${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
          NEXT_PUBLIC_STACK_PROJECT_ID=${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
          NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
          NEXT_PUBLIC_WWW_ORIGIN=${{ secrets.NEXT_PUBLIC_WWW_ORIGIN }}
          NEXT_PUBLIC_GITHUB_APP_SLUG=${{ secrets.NEXT_PUBLIC_GITHUB_APP_SLUG }}
          EOF
      - name: Generate icons
        if: ${{ steps.prebuilt.outputs.has != 'true' }}
        working-directory: apps/client
        run: bun run ./scripts/generate-icons.mjs
      - name: Build mac app via local script (x64)
        if: ${{ steps.prebuilt.outputs.has != 'true' }}
        run: bash scripts/build-electron-local.sh
      - name: Detect mac signing secrets
        if: ${{ steps.prebuilt.outputs.has != 'true' }}
        id: signing
        env:
          MAC_CERT_BASE64: ${{ secrets.MAC_CERT_BASE64 }}
          MAC_CERT_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          set -euo pipefail
          has=true
          for k in MAC_CERT_BASE64 MAC_CERT_PASSWORD APPLE_ID APPLE_APP_SPECIFIC_PASSWORD APPLE_TEAM_ID; do
            if [ -z "${!k:-}" ]; then has=false; fi
          done
          echo "has=$has" >> "$GITHUB_OUTPUT"
      - name: Prepare mac signing cert (x64)
        if: ${{ steps.prebuilt.outputs.has != 'true' && steps.signing.outputs.has == 'true' }}
        env:
          MAC_CERT_BASE64: ${{ secrets.MAC_CERT_BASE64 }}
        run: |
          set -euo pipefail
          CERT_PATH="$RUNNER_TEMP/mac_signing_cert.p12"
          node -e "process.stdout.write(Buffer.from(process.env.MAC_CERT_BASE64,'base64'))" > "$CERT_PATH"
          echo "CSC_LINK=$CERT_PATH" >> "$GITHUB_ENV"
      - name: Build & publish mac x64 (signed) to GitHub Releases
        if: ${{ steps.prebuilt.outputs.has != 'true' && steps.signing.outputs.has == 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
          CSC_IDENTITY_AUTO_DISCOVERY: 'false'
          CSC_LINK: ${{ env.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        working-directory: apps/client
        run: |
          bunx electron-builder --config electron-builder.json --mac --x64 --publish always --config.publish.provider=github --config.publish.owner="${{ github.repository_owner }}" --config.publish.repo="${{ github.event.repository.name }}"
      - name: Build & publish mac x64 (unsigned) to GitHub Releases
        if: ${{ steps.prebuilt.outputs.has != 'true' && steps.signing.outputs.has != 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
          CSC_IDENTITY_AUTO_DISCOVERY: 'false'
        working-directory: apps/client
        run: |
          bunx electron-builder --config electron-builder.json --mac dmg zip --x64 --publish always --config.mac.identity=null --config.publish.provider=github --config.publish.owner="${{ github.repository_owner }}" --config.publish.repo="${{ github.event.repository.name }}"

  mac-arm64:
    name: macOS arm64
    environment: electron
    runs-on: macos-14
    env:
      NEXT_PUBLIC_CONVEX_URL: ${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
      NEXT_PUBLIC_STACK_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
      NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY: ${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
      NEXT_PUBLIC_WWW_ORIGIN: ${{ secrets.NEXT_PUBLIC_WWW_ORIGIN }}
      NEXT_PUBLIC_GITHUB_APP_SLUG: ${{ secrets.NEXT_PUBLIC_GITHUB_APP_SLUG }}
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Check for prebuilt mac arm64 assets on release
        id: prebuilt
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          RELEASE_ID: ${{ github.event.release.id }}
        run: |
          set -euo pipefail
          node <<'NODE'
          const fs = require('node:fs');
          const token = process.env.GH_TOKEN;
          const owner = process.env.OWNER;
          const repo = process.env.REPO;
          const releaseId = process.env.RELEASE_ID;
          const out = process.env.GITHUB_OUTPUT;
          (async () => {
            const res = await fetch(`https://api.github.com/repos/${owner}/${repo}/releases/${releaseId}/assets`, {
              headers: {
                Authorization: `Bearer ${token}`,
                'X-GitHub-Api-Version': '2022-11-28',
                'Accept': 'application/vnd.github+json',
              },
            });
            if (!res.ok) {
              throw new Error(`Failed to list assets: ${res.status} ${res.statusText}`);
            }
            const assets = await res.json();
            const names = assets.map((a) => a.name);
            const hasYml = names.includes('latest-mac.yml');
            const hasPkg = names.some((n) => (n.includes('arm64') && (n.endsWith('.dmg') || n.endsWith('.zip'))));
            const has = hasYml && hasPkg;
            fs.appendFileSync(out, `has=${has}\n`);
          })().catch((e) => { console.error(e); process.exit(1); });
          NODE
      # Use Bun for installs and tooling
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21
      - name: Install dependencies (bun)
        if: ${{ steps.prebuilt.outputs.has != 'true' }}
        run: bun install --frozen-lockfile
      - name: Write .env for build
        if: ${{ steps.prebuilt.outputs.has != 'true' }}
        shell: bash
        run: |
          cat > .env <<EOF
          NEXT_PUBLIC_CONVEX_URL=${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
          NEXT_PUBLIC_STACK_PROJECT_ID=${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
          NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
          NEXT_PUBLIC_WWW_ORIGIN=${{ secrets.NEXT_PUBLIC_WWW_ORIGIN }}
          NEXT_PUBLIC_GITHUB_APP_SLUG=${{ secrets.NEXT_PUBLIC_GITHUB_APP_SLUG }}
          EOF
      - name: Generate icons
        if: ${{ steps.prebuilt.outputs.has != 'true' }}
        working-directory: apps/client
        run: bun run ./scripts/generate-icons.mjs
      - name: Build mac app via local script (arm64)
        if: ${{ steps.prebuilt.outputs.has != 'true' }}
        run: bash scripts/build-electron-local.sh
      - name: Detect mac signing secrets
        if: ${{ steps.prebuilt.outputs.has != 'true' }}
        id: signing_arm
        env:
          MAC_CERT_BASE64: ${{ secrets.MAC_CERT_BASE64 }}
          MAC_CERT_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          set -euo pipefail
          has=true
          for k in MAC_CERT_BASE64 MAC_CERT_PASSWORD APPLE_ID APPLE_APP_SPECIFIC_PASSWORD APPLE_TEAM_ID; do
            if [ -z "${!k:-}" ]; then has=false; fi
          done
          echo "has=$has" >> "$GITHUB_OUTPUT"
      - name: Prepare mac signing cert (arm64)
        if: ${{ steps.prebuilt.outputs.has != 'true' && steps.signing_arm.outputs.has == 'true' }}
        env:
          MAC_CERT_BASE64: ${{ secrets.MAC_CERT_BASE64 }}
        run: |
          set -euo pipefail
          CERT_PATH="$RUNNER_TEMP/mac_signing_cert.p12"
          node -e "process.stdout.write(Buffer.from(process.env.MAC_CERT_BASE64,'base64'))" > "$CERT_PATH"
          echo "CSC_LINK=$CERT_PATH" >> "$GITHUB_ENV"
      - name: Build & publish mac arm64 (signed) to GitHub Releases
        if: ${{ steps.prebuilt.outputs.has != 'true' && steps.signing_arm.outputs.has == 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
          CSC_IDENTITY_AUTO_DISCOVERY: 'false'
          CSC_LINK: ${{ env.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        working-directory: apps/client
        run: |
          bunx electron-builder --config electron-builder.json --mac --arm64 --publish always --config.publish.provider=github --config.publish.owner="${{ github.repository_owner }}" --config.publish.repo="${{ github.event.repository.name }}"
      - name: Build & publish mac arm64 (unsigned) to GitHub Releases
        if: ${{ steps.prebuilt.outputs.has != 'true' && steps.signing_arm.outputs.has != 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
          CSC_IDENTITY_AUTO_DISCOVERY: 'false'
        working-directory: apps/client
        run: |
          bunx electron-builder --config electron-builder.json --mac dmg zip --arm64 --publish always --config.mac.identity=null --config.publish.provider=github --config.publish.owner="${{ github.repository_owner }}" --config.publish.repo="${{ github.event.repository.name }}"

  windows-x64:
    name: Windows x64
    environment: electron
    runs-on: windows-latest
    env:
      NEXT_PUBLIC_CONVEX_URL: ${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
      NEXT_PUBLIC_STACK_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
      NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY: ${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
      NEXT_PUBLIC_WWW_ORIGIN: ${{ secrets.NEXT_PUBLIC_WWW_ORIGIN }}
      NEXT_PUBLIC_GITHUB_APP_SLUG: ${{ secrets.NEXT_PUBLIC_GITHUB_APP_SLUG }}
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Check for prebuilt Windows x64 assets on release
        id: prebuilt
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          RELEASE_ID: ${{ github.event.release.id }}
        run: |
          set -euo pipefail
          node <<'NODE'
          const fs = require('node:fs');
          const token = process.env.GH_TOKEN;
          const owner = process.env.OWNER;
          const repo = process.env.REPO;
          const releaseId = process.env.RELEASE_ID;
          const out = process.env.GITHUB_OUTPUT;
          (async () => {
            const res = await fetch(`https://api.github.com/repos/${owner}/${repo}/releases/${releaseId}/assets`, {
              headers: {
                Authorization: `Bearer ${token}`,
                'X-GitHub-Api-Version': '2022-11-28',
                'Accept': 'application/vnd.github+json',
              },
            });
            if (!res.ok) {
              throw new Error(`Failed to list assets: ${res.status} ${res.statusText}`);
            }
            const assets = await res.json();
            const names = assets.map((a) => a.name);
            const hasYml = names.includes('latest.yml');
            const hasExe = names.some((n) => n.endsWith('.exe'));
            const has = hasYml && hasExe;
            fs.appendFileSync(out, `has=${has}\n`);
          })().catch((e) => { console.error(e); process.exit(1); });
          NODE
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21
      - name: Install dependencies (bun)
        if: ${{ steps.prebuilt.outputs.has != 'true' }}
        run: bun install --frozen-lockfile
      - name: Write .env for build
        if: ${{ steps.prebuilt.outputs.has != 'true' }}
        shell: bash
        run: |
          cat > .env <<EOF
          NEXT_PUBLIC_CONVEX_URL=${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
          NEXT_PUBLIC_STACK_PROJECT_ID=${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
          NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
          NEXT_PUBLIC_WWW_ORIGIN=${{ secrets.NEXT_PUBLIC_WWW_ORIGIN }}
          NEXT_PUBLIC_GITHUB_APP_SLUG=${{ secrets.NEXT_PUBLIC_GITHUB_APP_SLUG }}
          EOF
      - name: Generate icons
        if: ${{ steps.prebuilt.outputs.has != 'true' }}
        working-directory: apps/client
        run: bun run ./scripts/generate-icons.mjs
      - name: Build & publish Windows x64 to GitHub Releases
        if: ${{ steps.prebuilt.outputs.has != 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
          # Windows code signing (optional). Uncomment and provide secrets
          # to enable signed installers and reduce SmartScreen warnings.
          # WIN_CSC_LINK: base64:${{ secrets.WIN_CERT_BASE64 }}
          # WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CERT_PASSWORD }}
          # CSC_LINK: base64:${{ secrets.WIN_CERT_BASE64 }}
          # CSC_KEY_PASSWORD: ${{ secrets.WIN_CERT_PASSWORD }}
        working-directory: apps/client
        run: bunx electron-vite build -c electron.vite.config.ts && bunx electron-builder --config electron-builder.json --win --x64 --publish always --config.publish.provider=github --config.publish.owner="${{ github.repository_owner }}" --config.publish.repo="${{ github.event.repository.name }}"

  linux-x64:
    name: Linux x64
    environment: electron
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_CONVEX_URL: ${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
      NEXT_PUBLIC_STACK_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
      NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY: ${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
      NEXT_PUBLIC_WWW_ORIGIN: ${{ secrets.NEXT_PUBLIC_WWW_ORIGIN }}
      NEXT_PUBLIC_GITHUB_APP_SLUG: ${{ secrets.NEXT_PUBLIC_GITHUB_APP_SLUG }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Check for prebuilt Linux x64 assets on release
        id: prebuilt
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          RELEASE_ID: ${{ github.event.release.id }}
        run: |
          set -euo pipefail
          node <<'NODE'
          const fs = require('node:fs');
          const token = process.env.GH_TOKEN;
          const owner = process.env.OWNER;
          const repo = process.env.REPO;
          const releaseId = process.env.RELEASE_ID;
          const out = process.env.GITHUB_OUTPUT;
          (async () => {
            const res = await fetch(`https://api.github.com/repos/${owner}/${repo}/releases/${releaseId}/assets`, {
              headers: {
                Authorization: `Bearer ${token}`,
                'X-GitHub-Api-Version': '2022-11-28',
                'Accept': 'application/vnd.github+json',
              },
            });
            if (!res.ok) {
              throw new Error(`Failed to list assets: ${res.status} ${res.statusText}`);
            }
            const assets = await res.json();
            const names = assets.map((a) => a.name);
            const hasYml = names.includes('latest-linux.yml');
            const hasAppImage = names.some((n) => n.endsWith('.AppImage'));
            const has = hasYml && hasAppImage;
            fs.appendFileSync(out, `has=${has}\n`);
          })().catch((e) => { console.error(e); process.exit(1); });
          NODE
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21
      - name: Install dependencies (bun)
        if: ${{ steps.prebuilt.outputs.has != 'true' }}
        run: bun install --frozen-lockfile
      - name: Write .env for build
        if: ${{ steps.prebuilt.outputs.has != 'true' }}
        shell: bash
        run: |
          cat > .env <<EOF
          NEXT_PUBLIC_CONVEX_URL=${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
          NEXT_PUBLIC_STACK_PROJECT_ID=${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
          NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
          NEXT_PUBLIC_WWW_ORIGIN=${{ secrets.NEXT_PUBLIC_WWW_ORIGIN }}
          NEXT_PUBLIC_GITHUB_APP_SLUG=${{ secrets.NEXT_PUBLIC_GITHUB_APP_SLUG }}
          EOF
      - name: Generate icons
        if: ${{ steps.prebuilt.outputs.has != 'true' }}
        working-directory: apps/client
        run: bun run ./scripts/generate-icons.mjs
      - name: Build & publish Linux AppImage x64 to GitHub Releases
        if: ${{ steps.prebuilt.outputs.has != 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
        working-directory: apps/client
        run: bunx electron-vite build -c electron.vite.config.ts && bunx electron-builder --config electron-builder.json --linux AppImage --x64 --publish always --config.publish.provider=github --config.publish.owner="${{ github.repository_owner }}" --config.publish.repo="${{ github.event.repository.name }}"
        
