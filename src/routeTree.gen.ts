/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LayoutSettingsRouteImport } from './routes/_layout.settings'
import { Route as LayoutProfileRouteImport } from './routes/_layout.profile'
import { Route as LayoutDashboardRouteImport } from './routes/_layout.dashboard'
import { Route as LayoutTaskTaskIdRouteImport } from './routes/_layout.task.$taskId'
import { Route as LayoutTaskTaskIdRunRunIdRouteImport } from './routes/_layout.task.$taskId.run.$runId'

const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutSettingsRoute = LayoutSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutProfileRoute = LayoutProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutDashboardRoute = LayoutDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutTaskTaskIdRoute = LayoutTaskTaskIdRouteImport.update({
  id: '/task/$taskId',
  path: '/task/$taskId',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutTaskTaskIdRunRunIdRoute =
  LayoutTaskTaskIdRunRunIdRouteImport.update({
    id: '/run/$runId',
    path: '/run/$runId',
    getParentRoute: () => LayoutTaskTaskIdRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof LayoutDashboardRoute
  '/profile': typeof LayoutProfileRoute
  '/settings': typeof LayoutSettingsRoute
  '/task/$taskId': typeof LayoutTaskTaskIdRouteWithChildren
  '/task/$taskId/run/$runId': typeof LayoutTaskTaskIdRunRunIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof LayoutDashboardRoute
  '/profile': typeof LayoutProfileRoute
  '/settings': typeof LayoutSettingsRoute
  '/task/$taskId': typeof LayoutTaskTaskIdRouteWithChildren
  '/task/$taskId/run/$runId': typeof LayoutTaskTaskIdRunRunIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/dashboard': typeof LayoutDashboardRoute
  '/_layout/profile': typeof LayoutProfileRoute
  '/_layout/settings': typeof LayoutSettingsRoute
  '/_layout/task/$taskId': typeof LayoutTaskTaskIdRouteWithChildren
  '/_layout/task/$taskId/run/$runId': typeof LayoutTaskTaskIdRunRunIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/profile'
    | '/settings'
    | '/task/$taskId'
    | '/task/$taskId/run/$runId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/profile'
    | '/settings'
    | '/task/$taskId'
    | '/task/$taskId/run/$runId'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/_layout/dashboard'
    | '/_layout/profile'
    | '/_layout/settings'
    | '/_layout/task/$taskId'
    | '/_layout/task/$taskId/run/$runId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LayoutRoute: typeof LayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/settings': {
      id: '/_layout/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof LayoutSettingsRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/profile': {
      id: '/_layout/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof LayoutProfileRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/dashboard': {
      id: '/_layout/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof LayoutDashboardRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/task/$taskId': {
      id: '/_layout/task/$taskId'
      path: '/task/$taskId'
      fullPath: '/task/$taskId'
      preLoaderRoute: typeof LayoutTaskTaskIdRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/task/$taskId/run/$runId': {
      id: '/_layout/task/$taskId/run/$runId'
      path: '/run/$runId'
      fullPath: '/task/$taskId/run/$runId'
      preLoaderRoute: typeof LayoutTaskTaskIdRunRunIdRouteImport
      parentRoute: typeof LayoutTaskTaskIdRoute
    }
  }
}

interface LayoutTaskTaskIdRouteChildren {
  LayoutTaskTaskIdRunRunIdRoute: typeof LayoutTaskTaskIdRunRunIdRoute
}

const LayoutTaskTaskIdRouteChildren: LayoutTaskTaskIdRouteChildren = {
  LayoutTaskTaskIdRunRunIdRoute: LayoutTaskTaskIdRunRunIdRoute,
}

const LayoutTaskTaskIdRouteWithChildren =
  LayoutTaskTaskIdRoute._addFileChildren(LayoutTaskTaskIdRouteChildren)

interface LayoutRouteChildren {
  LayoutDashboardRoute: typeof LayoutDashboardRoute
  LayoutProfileRoute: typeof LayoutProfileRoute
  LayoutSettingsRoute: typeof LayoutSettingsRoute
  LayoutTaskTaskIdRoute: typeof LayoutTaskTaskIdRouteWithChildren
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutDashboardRoute: LayoutDashboardRoute,
  LayoutProfileRoute: LayoutProfileRoute,
  LayoutSettingsRoute: LayoutSettingsRoute,
  LayoutTaskTaskIdRoute: LayoutTaskTaskIdRouteWithChildren,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutRoute: LayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
