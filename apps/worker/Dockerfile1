# Build stage
FROM node:20-alpine AS builder

# Install dependencies needed for building
RUN apk add --no-cache curl python3 make g++ linux-headers bash

# Install bun
# RUN npm install -g bun
RUN curl -fsSL https://bun.sh/install | bash
ENV PATH="/root/.bun/bin:$PATH"

COPY . /coderouter
WORKDIR /coderouter

# Install dependencies and build the worker
RUN npm install
RUN bun build ./apps/worker/src/index.ts --target node --outdir ./apps/worker/build

# Runtime stage
FROM docker:28.3.2-dind

# Install runtime dependencies
RUN apk add --no-cache curl nodejs npm bash

# Install devcontainer CLI
RUN npm install -g @devcontainers/cli

# Copy the built application from builder stage
COPY --from=builder /coderouter/apps/worker/build /builtins/build
COPY --from=builder /coderouter/apps/worker/package.json /builtins/package.json
COPY --from=builder /coderouter/apps/worker/wait-for-docker.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/wait-for-docker.sh

# Create workspace directory and set working directory
RUN mkdir -p /workspace
WORKDIR /builtins

# Set environment variables
ENV NODE_ENV=production
ENV WORKER_PORT=3002
ENV MANAGEMENT_PORT=3003

# Expose ports
EXPOSE 2375 3002 3003

# Create startup script
RUN cat > /startup.sh << 'EOF'
#!/bin/sh
# Start Docker daemon in the background
dockerd-entrypoint.sh &

# Wait for Docker to be ready
wait-for-docker.sh

# Start the Node.js worker
node /builtins/build/index.js
EOF

RUN chmod +x /startup.sh

# Use the startup script as entrypoint
ENTRYPOINT ["/startup.sh"]
CMD []