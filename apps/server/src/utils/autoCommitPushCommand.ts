/**
 * Build a single safe bash command to stage, commit, pull --rebase (if remote exists), and push.
 * Uses JSON.stringify to safely quote dynamic strings that may contain spaces/newlines/quotes.
 */
export function buildAutoCommitPushCommand(options: {
  branchName: string;
  commitMessage: string;
}): string {
  const { branchName, commitMessage } = options;

  // Use JSON to produce a double-quoted, escaped string safe for bash -c
  const b = JSON.stringify(branchName);

  return [
    "set -euo pipefail",
    "CMUX_MSG=$(mktemp)",
    'cleanup() { rm -f "$CMUX_MSG"; }',
    "trap cleanup EXIT",
    "trap 'echo \"[cmux auto-commit] error line $LINENO exit=$?\" >&2' ERR",
    'echo "[cmux auto-commit] script start cwd=$(pwd)" >&2',
    "if command -v gh >/dev/null 2>&1; then",
    "  echo '[cmux auto-commit] gh auth status:' >&2",
    "  gh auth status >&2 || true",
    "fi",
    `cat <<'CMUX_EOF' > "$CMUX_MSG"`,
    commitMessage,
    "CMUX_EOF",
    "",
    "run_repo() {",
    '  local repo="$1"',
    "  (",
    '    echo "[cmux auto-commit] repo=$repo -> enter directory" >&2',
    '    repo_path=$(cd "$repo" 2>/dev/null && pwd || true)',
    '    echo "[cmux auto-commit] repo=$repo -> pwd=$repo_path" >&2',
    '    origin_url=$(git -C "$repo" config --get remote.origin.url 2>/dev/null || true)',
    '    echo "[cmux auto-commit] repo=$repo -> origin=$origin_url" >&2',
    '    echo "[cmux auto-commit] repo=$repo -> git status --short" >&2',
    '    git -C "$repo" status --short || { echo "[cmux auto-commit] repo=$repo git status failed" >&2; exit 1; }',
    '    echo "[cmux auto-commit] repo=$repo -> git add -A" >&2',
    '    git -C "$repo" add -A || { echo "[cmux auto-commit] repo=$repo git add failed" >&2; exit 1; }',
    `    echo "[cmux auto-commit] repo=$repo -> checkout ${branchName}" >&2`,
    `    (git -C "$repo" checkout -b ${b} 2>/dev/null || git -C "$repo" checkout ${b}) || { echo "[cmux auto-commit] repo=$repo checkout ${branchName} failed" >&2; exit 1; }`,
    '    echo "[cmux auto-commit] repo=$repo -> git commit" >&2',
    `    if git -C "$repo" commit -F "$CMUX_MSG"; then`,
    `      echo "[cmux auto-commit] repo=$repo commit created"`,
    "    else",
    "      commit_exit=$?",
    `      if git -C "$repo" status --short | grep -q .; then`,
    `        echo "[cmux auto-commit] repo=$repo commit failed (exit $commit_exit) with pending changes" >&2`,
    "        exit $commit_exit",
    "      else",
    `        echo "[cmux auto-commit] repo=$repo nothing to commit" >&2`,
    "      fi",
    "    fi",
    // If remote branch exists, integrate updates before pushing
    `    if git -C "$repo" ls-remote --heads origin ${b} | grep -q .; then`,
    `      echo "[cmux auto-commit] repo=$repo -> git pull --rebase origin ${branchName}" >&2`,
    `      git -C "$repo" pull --rebase origin ${b} || { echo "[cmux auto-commit] repo=$repo pull --rebase failed" >&2; exit 1; }`,
    "    else",
    `      echo "[cmux auto-commit] repo=$repo remote branch missing; skip pull --rebase" >&2`,
    "    fi",
    `    echo "[cmux auto-commit] repo=$repo -> git push -u origin ${branchName}" >&2`,
    `    git -C "$repo" push -u origin ${b} || { echo "[cmux auto-commit] repo=$repo push failed" >&2; exit 1; }`,
    "  )",
    "}",
    "",
    "repos=()",
    "trap - ERR",
    "echo '[cmux auto-commit] detecting repositories' >&2",
    'echo "[cmux auto-commit] scanning repos from $(pwd)" >&2',
    "while IFS= read -r -d '' git_entry; do",
    '  repo_dir_raw="$(dirname "$git_entry")"',
    '  repo_dir="$(cd "$repo_dir_raw" 2>/dev/null && pwd || true)"',
    '  if [ -z "$repo_dir" ]; then',
    "    continue",
    "  fi",
    '  if git -C "$repo_dir" rev-parse --is-inside-work-tree >/dev/null 2>&1; then',
    '    repos+=("$repo_dir")',
    "  fi",
    "done < <(find . -mindepth 1 -maxdepth 6 \\( -type d -o -type f \\) -name .git -print0 2>/dev/null || true)",
    "",
    'echo "[cmux auto-commit] discovered ${#repos[@]} repos" >&2',
    "trap 'echo \"[cmux auto-commit] error line $LINENO exit=$?\" >&2' ERR",
    'if [ "${#repos[@]}" -eq 0 ]; then',
    "  echo '[cmux auto-commit] No git repositories found for auto-commit' >&2",
    "else",
    '  for repo in "${repos[@]}"; do',
    '    echo "[cmux auto-commit] repo candidate: $repo" >&2',
    '    run_repo "$repo"',
    "  done",
    "fi",
  ].join("\n");
}
