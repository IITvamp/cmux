/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as IndexRouteImport } from './routes/index'
import { Route as HandlerSplatRouteImport } from './routes/handler.$'
import { Route as LayoutSettingsRouteImport } from './routes/_layout.settings'
import { Route as LayoutProfileRouteImport } from './routes/_layout.profile'
import { Route as LayoutDebugRouteImport } from './routes/_layout.debug'
import { Route as LayoutDashboardRouteImport } from './routes/_layout.dashboard'
import { Route as LayoutTaskTaskIdRouteImport } from './routes/_layout.task.$taskId'
import { Route as LayoutTaskTaskIdIndexRouteImport } from './routes/_layout.task.$taskId.index'
import { Route as LayoutTaskTaskIdRunTaskRunIdRouteImport } from './routes/_layout.task.$taskId.run.$taskRunId'

const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const HandlerSplatRoute = HandlerSplatRouteImport.update({
  id: '/handler/$',
  path: '/handler/$',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutSettingsRoute = LayoutSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutProfileRoute = LayoutProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutDebugRoute = LayoutDebugRouteImport.update({
  id: '/debug',
  path: '/debug',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutDashboardRoute = LayoutDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutTaskTaskIdRoute = LayoutTaskTaskIdRouteImport.update({
  id: '/task/$taskId',
  path: '/task/$taskId',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutTaskTaskIdIndexRoute = LayoutTaskTaskIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutTaskTaskIdRoute,
} as any)
const LayoutTaskTaskIdRunTaskRunIdRoute =
  LayoutTaskTaskIdRunTaskRunIdRouteImport.update({
    id: '/run/$taskRunId',
    path: '/run/$taskRunId',
    getParentRoute: () => LayoutTaskTaskIdRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof LayoutDashboardRoute
  '/debug': typeof LayoutDebugRoute
  '/profile': typeof LayoutProfileRoute
  '/settings': typeof LayoutSettingsRoute
  '/handler/$': typeof HandlerSplatRoute
  '/task/$taskId': typeof LayoutTaskTaskIdRouteWithChildren
  '/task/$taskId/': typeof LayoutTaskTaskIdIndexRoute
  '/task/$taskId/run/$taskRunId': typeof LayoutTaskTaskIdRunTaskRunIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof LayoutDashboardRoute
  '/debug': typeof LayoutDebugRoute
  '/profile': typeof LayoutProfileRoute
  '/settings': typeof LayoutSettingsRoute
  '/handler/$': typeof HandlerSplatRoute
  '/task/$taskId': typeof LayoutTaskTaskIdIndexRoute
  '/task/$taskId/run/$taskRunId': typeof LayoutTaskTaskIdRunTaskRunIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/dashboard': typeof LayoutDashboardRoute
  '/_layout/debug': typeof LayoutDebugRoute
  '/_layout/profile': typeof LayoutProfileRoute
  '/_layout/settings': typeof LayoutSettingsRoute
  '/handler/$': typeof HandlerSplatRoute
  '/_layout/task/$taskId': typeof LayoutTaskTaskIdRouteWithChildren
  '/_layout/task/$taskId/': typeof LayoutTaskTaskIdIndexRoute
  '/_layout/task/$taskId/run/$taskRunId': typeof LayoutTaskTaskIdRunTaskRunIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/debug'
    | '/profile'
    | '/settings'
    | '/handler/$'
    | '/task/$taskId'
    | '/task/$taskId/'
    | '/task/$taskId/run/$taskRunId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/debug'
    | '/profile'
    | '/settings'
    | '/handler/$'
    | '/task/$taskId'
    | '/task/$taskId/run/$taskRunId'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/_layout/dashboard'
    | '/_layout/debug'
    | '/_layout/profile'
    | '/_layout/settings'
    | '/handler/$'
    | '/_layout/task/$taskId'
    | '/_layout/task/$taskId/'
    | '/_layout/task/$taskId/run/$taskRunId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LayoutRoute: typeof LayoutRouteWithChildren
  HandlerSplatRoute: typeof HandlerSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/handler/$': {
      id: '/handler/$'
      path: '/handler/$'
      fullPath: '/handler/$'
      preLoaderRoute: typeof HandlerSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/settings': {
      id: '/_layout/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof LayoutSettingsRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/profile': {
      id: '/_layout/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof LayoutProfileRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/debug': {
      id: '/_layout/debug'
      path: '/debug'
      fullPath: '/debug'
      preLoaderRoute: typeof LayoutDebugRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/dashboard': {
      id: '/_layout/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof LayoutDashboardRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/task/$taskId': {
      id: '/_layout/task/$taskId'
      path: '/task/$taskId'
      fullPath: '/task/$taskId'
      preLoaderRoute: typeof LayoutTaskTaskIdRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/task/$taskId/': {
      id: '/_layout/task/$taskId/'
      path: '/'
      fullPath: '/task/$taskId/'
      preLoaderRoute: typeof LayoutTaskTaskIdIndexRouteImport
      parentRoute: typeof LayoutTaskTaskIdRoute
    }
    '/_layout/task/$taskId/run/$taskRunId': {
      id: '/_layout/task/$taskId/run/$taskRunId'
      path: '/run/$taskRunId'
      fullPath: '/task/$taskId/run/$taskRunId'
      preLoaderRoute: typeof LayoutTaskTaskIdRunTaskRunIdRouteImport
      parentRoute: typeof LayoutTaskTaskIdRoute
    }
  }
}

interface LayoutTaskTaskIdRouteChildren {
  LayoutTaskTaskIdIndexRoute: typeof LayoutTaskTaskIdIndexRoute
  LayoutTaskTaskIdRunTaskRunIdRoute: typeof LayoutTaskTaskIdRunTaskRunIdRoute
}

const LayoutTaskTaskIdRouteChildren: LayoutTaskTaskIdRouteChildren = {
  LayoutTaskTaskIdIndexRoute: LayoutTaskTaskIdIndexRoute,
  LayoutTaskTaskIdRunTaskRunIdRoute: LayoutTaskTaskIdRunTaskRunIdRoute,
}

const LayoutTaskTaskIdRouteWithChildren =
  LayoutTaskTaskIdRoute._addFileChildren(LayoutTaskTaskIdRouteChildren)

interface LayoutRouteChildren {
  LayoutDashboardRoute: typeof LayoutDashboardRoute
  LayoutDebugRoute: typeof LayoutDebugRoute
  LayoutProfileRoute: typeof LayoutProfileRoute
  LayoutSettingsRoute: typeof LayoutSettingsRoute
  LayoutTaskTaskIdRoute: typeof LayoutTaskTaskIdRouteWithChildren
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutDashboardRoute: LayoutDashboardRoute,
  LayoutDebugRoute: LayoutDebugRoute,
  LayoutProfileRoute: LayoutProfileRoute,
  LayoutSettingsRoute: LayoutSettingsRoute,
  LayoutTaskTaskIdRoute: LayoutTaskTaskIdRouteWithChildren,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutRoute: LayoutRouteWithChildren,
  HandlerSplatRoute: HandlerSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
