// This file is auto-generated by @hey-api/openapi-ts

export type Health = {
    status: 'healthy' | 'unhealthy';
    timestamp: string;
    version: string;
    /**
     * Uptime in seconds
     */
    uptime: number;
};

export type User = {
    id: string;
    name: string;
    email: string;
    age?: number;
    createdAt: string;
};

export type UserList = {
    users: Array<User>;
    total: number;
    page: number;
    pageSize: number;
};

export type _Error = {
    code: number;
    message: string;
    details?: unknown;
};

export type ValidationError = {
    code: 422;
    message: string;
    errors: Array<{
        path: Array<string | number>;
        message: string;
    }>;
};

export type CreateUser = {
    name: string;
    email: string;
    age?: number;
};

export type UpdateUser = {
    name?: string;
    email?: string;
    age?: number;
};

export type Book = {
    id: string;
    title: string;
    author: string;
    isbn?: string;
    publishedYear: number;
    genre: 'fiction' | 'non-fiction' | 'science' | 'history' | 'biography';
    available: boolean;
};

export type BookList = {
    books: Array<Book>;
    total: number;
};

export type CreateBook = {
    title: string;
    author: string;
    isbn?: string;
    publishedYear: number;
    genre: 'fiction' | 'non-fiction' | 'science' | 'history' | 'biography';
};

export type DevServerResponse = {
    instanceId: string;
    vscodeUrl: string;
    workerUrl: string;
    status: string;
    taskId: string;
    terminalCreated: boolean;
};

export type ErrorResponse = {
    code: number;
    message: string;
    error?: string;
};

export type GithubRepo = {
    name: string;
    full_name: string;
    private: boolean;
    updated_at?: string | null;
    pushed_at?: string | null;
};

export type GithubReposResponse = {
    repos: Array<GithubRepo>;
};

export type ProvisionInstanceResponse = {
    vscodeUrl: string;
    instanceId: string;
};

export type ProvisionInstanceBody = {
    ttlSeconds?: number;
};

export type CreateEnvironmentResponse = {
    environmentId: string;
};

export type CreateEnvironmentBody = {
    /**
     * Team slug or UUID
     */
    team: string;
    name: string;
    morphSnapshotId: string;
    /**
     * .env file contents
     */
    envFile: string;
};

export type GetApiHealthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/health';
};

export type GetApiHealthResponses = {
    /**
     * Service is healthy
     */
    200: Health;
};

export type GetApiHealthResponse = GetApiHealthResponses[keyof GetApiHealthResponses];

export type GetApiUsersData = {
    body?: never;
    path?: never;
    query?: {
        page?: string;
        pageSize?: string;
        search?: string;
    };
    url: '/api/users';
};

export type GetApiUsersResponses = {
    /**
     * List of users
     */
    200: UserList;
};

export type GetApiUsersResponse = GetApiUsersResponses[keyof GetApiUsersResponses];

export type PostApiUsersData = {
    body: CreateUser;
    path?: never;
    query?: never;
    url: '/api/users';
};

export type PostApiUsersErrors = {
    /**
     * Validation error
     */
    422: ValidationError;
};

export type PostApiUsersError = PostApiUsersErrors[keyof PostApiUsersErrors];

export type PostApiUsersResponses = {
    /**
     * User created
     */
    201: User;
};

export type PostApiUsersResponse = PostApiUsersResponses[keyof PostApiUsersResponses];

export type DeleteApiUsersByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/{id}';
};

export type DeleteApiUsersByIdErrors = {
    /**
     * User not found
     */
    404: _Error;
};

export type DeleteApiUsersByIdError = DeleteApiUsersByIdErrors[keyof DeleteApiUsersByIdErrors];

export type DeleteApiUsersByIdResponses = {
    /**
     * User deleted
     */
    204: void;
};

export type DeleteApiUsersByIdResponse = DeleteApiUsersByIdResponses[keyof DeleteApiUsersByIdResponses];

export type GetApiUsersByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/{id}';
};

export type GetApiUsersByIdErrors = {
    /**
     * User not found
     */
    404: _Error;
};

export type GetApiUsersByIdError = GetApiUsersByIdErrors[keyof GetApiUsersByIdErrors];

export type GetApiUsersByIdResponses = {
    /**
     * The user
     */
    200: User;
};

export type GetApiUsersByIdResponse = GetApiUsersByIdResponses[keyof GetApiUsersByIdResponses];

export type PatchApiUsersByIdData = {
    body: UpdateUser;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/{id}';
};

export type PatchApiUsersByIdErrors = {
    /**
     * User not found
     */
    404: _Error;
    /**
     * Validation error
     */
    422: ValidationError;
};

export type PatchApiUsersByIdError = PatchApiUsersByIdErrors[keyof PatchApiUsersByIdErrors];

export type PatchApiUsersByIdResponses = {
    /**
     * User updated
     */
    200: User;
};

export type PatchApiUsersByIdResponse = PatchApiUsersByIdResponses[keyof PatchApiUsersByIdResponses];

export type GetApiBooksData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/books';
};

export type GetApiBooksResponses = {
    /**
     * List of books
     */
    200: BookList;
};

export type GetApiBooksResponse = GetApiBooksResponses[keyof GetApiBooksResponses];

export type PostApiBooksData = {
    body: CreateBook;
    path?: never;
    query?: never;
    url: '/api/books';
};

export type PostApiBooksErrors = {
    /**
     * Validation error
     */
    422: ValidationError;
};

export type PostApiBooksError = PostApiBooksErrors[keyof PostApiBooksErrors];

export type PostApiBooksResponses = {
    /**
     * Book created
     */
    201: Book;
};

export type PostApiBooksResponse = PostApiBooksResponses[keyof PostApiBooksResponses];

export type GetApiBooksByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/books/{id}';
};

export type GetApiBooksByIdErrors = {
    /**
     * Book not found
     */
    404: _Error;
};

export type GetApiBooksByIdError = GetApiBooksByIdErrors[keyof GetApiBooksByIdErrors];

export type GetApiBooksByIdResponses = {
    /**
     * The book
     */
    200: Book;
};

export type GetApiBooksByIdResponse = GetApiBooksByIdResponses[keyof GetApiBooksByIdResponses];

export type PostApiBooksByIdBorrowData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/books/{id}/borrow';
};

export type PostApiBooksByIdBorrowErrors = {
    /**
     * Book not available
     */
    400: _Error;
    /**
     * Book not found
     */
    404: _Error;
};

export type PostApiBooksByIdBorrowError = PostApiBooksByIdBorrowErrors[keyof PostApiBooksByIdBorrowErrors];

export type PostApiBooksByIdBorrowResponses = {
    /**
     * Book borrowed successfully
     */
    200: Book;
};

export type PostApiBooksByIdBorrowResponse = PostApiBooksByIdBorrowResponses[keyof PostApiBooksByIdBorrowResponses];

export type PostApiBooksByIdReturnData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/books/{id}/return';
};

export type PostApiBooksByIdReturnErrors = {
    /**
     * Book already available
     */
    400: _Error;
    /**
     * Book not found
     */
    404: _Error;
};

export type PostApiBooksByIdReturnError = PostApiBooksByIdReturnErrors[keyof PostApiBooksByIdReturnErrors];

export type PostApiBooksByIdReturnResponses = {
    /**
     * Book returned successfully
     */
    200: Book;
};

export type PostApiBooksByIdReturnResponse = PostApiBooksByIdReturnResponses[keyof PostApiBooksByIdReturnResponses];

export type PostApiDevServerStartData = {
    /**
     * Start a new development server instance with the specified task
     */
    body: {
        /**
         * GitHub repository URL
         */
        repoUrl: string;
        /**
         * Git branch to checkout
         */
        branch?: string;
        /**
         * Description of the task to perform
         */
        taskDescription: string;
        /**
         * Full name of the project (owner/repo)
         */
        projectFullName: string;
        /**
         * Unique task identifier
         */
        taskId: string;
        /**
         * List of AI agents to use
         */
        selectedAgents?: Array<string>;
        /**
         * Whether to run in cloud mode
         */
        isCloudMode?: boolean;
        /**
         * Array of images to include with the task
         */
        images?: Array<{
            src: string;
            fileName?: string;
            altText: string;
        }>;
        /**
         * UI theme preference
         */
        theme?: 'dark' | 'light' | 'system';
        /**
         * Morph snapshot ID to use for the instance
         */
        snapshotId?: string;
        /**
         * Time to live in seconds (default 30 minutes)
         */
        ttlSeconds?: number;
    };
    path?: never;
    query?: never;
    url: '/api/dev-server/start';
};

export type PostApiDevServerStartErrors = {
    /**
     * Failed to start development server
     */
    500: ErrorResponse;
};

export type PostApiDevServerStartError = PostApiDevServerStartErrors[keyof PostApiDevServerStartErrors];

export type PostApiDevServerStartResponses = {
    /**
     * Development server started successfully
     */
    200: DevServerResponse;
};

export type PostApiDevServerStartResponse = PostApiDevServerStartResponses[keyof PostApiDevServerStartResponses];

export type GetApiIntegrationsGithubReposData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Team slug or UUID
         */
        team: string;
        /**
         * GitHub App installation ID to query
         */
        installationId?: number | null;
        /**
         * Optional search term to filter repos by name
         */
        search?: string;
        /**
         * 1-based page index (default 1)
         */
        page?: number;
    };
    url: '/api/integrations/github/repos';
};

export type GetApiIntegrationsGithubReposErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Not configured
     */
    501: unknown;
};

export type GetApiIntegrationsGithubReposResponses = {
    /**
     * OK
     */
    200: GithubReposResponse;
};

export type GetApiIntegrationsGithubReposResponse = GetApiIntegrationsGithubReposResponses[keyof GetApiIntegrationsGithubReposResponses];

export type PostApiMorphProvisionInstanceData = {
    body?: ProvisionInstanceBody;
    path?: never;
    query?: never;
    url: '/api/morph/provision-instance';
};

export type PostApiMorphProvisionInstanceErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Failed to provision instance
     */
    500: unknown;
};

export type PostApiMorphProvisionInstanceResponses = {
    /**
     * Instance provisioned successfully
     */
    200: ProvisionInstanceResponse;
};

export type PostApiMorphProvisionInstanceResponse = PostApiMorphProvisionInstanceResponses[keyof PostApiMorphProvisionInstanceResponses];

export type PostApiEnvironmentsData = {
    body?: CreateEnvironmentBody;
    path?: never;
    query?: never;
    url: '/api/environments';
};

export type PostApiEnvironmentsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Failed to create environment
     */
    500: unknown;
};

export type PostApiEnvironmentsResponses = {
    /**
     * Environment created
     */
    200: CreateEnvironmentResponse;
};

export type PostApiEnvironmentsResponse = PostApiEnvironmentsResponses[keyof PostApiEnvironmentsResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};