// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client/index.js';
import type { GetApiHealthData, GetApiHealthResponses, GetApiUsersData, GetApiUsersResponses, PostApiUsersData, PostApiUsersResponses, PostApiUsersErrors, DeleteApiUsersByIdData, DeleteApiUsersByIdResponses, DeleteApiUsersByIdErrors, GetApiUsersByIdData, GetApiUsersByIdResponses, GetApiUsersByIdErrors, PatchApiUsersByIdData, PatchApiUsersByIdResponses, PatchApiUsersByIdErrors, GetApiBooksData, GetApiBooksResponses, PostApiBooksData, PostApiBooksResponses, PostApiBooksErrors, GetApiBooksByIdData, GetApiBooksByIdResponses, GetApiBooksByIdErrors, PostApiBooksByIdBorrowData, PostApiBooksByIdBorrowResponses, PostApiBooksByIdBorrowErrors, PostApiBooksByIdReturnData, PostApiBooksByIdReturnResponses, PostApiBooksByIdReturnErrors, PostApiDevServerStartData, PostApiDevServerStartResponses, PostApiDevServerStartErrors, GetApiIntegrationsGithubReposData, GetApiIntegrationsGithubReposResponses, GetApiIntegrationsGithubReposErrors, PostApiMorphSetupInstanceData, PostApiMorphSetupInstanceResponses, PostApiMorphSetupInstanceErrors, GetApiEnvironmentsData, GetApiEnvironmentsResponses, GetApiEnvironmentsErrors, PostApiEnvironmentsData, PostApiEnvironmentsResponses, PostApiEnvironmentsErrors, DeleteApiEnvironmentsByIdData, DeleteApiEnvironmentsByIdResponses, DeleteApiEnvironmentsByIdErrors, GetApiEnvironmentsByIdData, GetApiEnvironmentsByIdResponses, GetApiEnvironmentsByIdErrors, GetApiEnvironmentsByIdVarsData, GetApiEnvironmentsByIdVarsResponses, GetApiEnvironmentsByIdVarsErrors } from './types.gen.js';
import { client as _heyApiClient } from './client.gen.js';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Health check endpoint
 */
export const getApiHealth = <ThrowOnError extends boolean = false>(options?: Options<GetApiHealthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiHealthResponses, unknown, ThrowOnError>({
        url: '/api/health',
        ...options
    });
};

/**
 * List all users
 */
export const getApiUsers = <ThrowOnError extends boolean = false>(options?: Options<GetApiUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiUsersResponses, unknown, ThrowOnError>({
        url: '/api/users',
        ...options
    });
};

/**
 * Create a new user
 */
export const postApiUsers = <ThrowOnError extends boolean = false>(options: Options<PostApiUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiUsersResponses, PostApiUsersErrors, ThrowOnError>({
        url: '/api/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a user
 */
export const deleteApiUsersById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiUsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiUsersByIdResponses, DeleteApiUsersByIdErrors, ThrowOnError>({
        url: '/api/users/{id}',
        ...options
    });
};

/**
 * Get a user by ID
 */
export const getApiUsersById = <ThrowOnError extends boolean = false>(options: Options<GetApiUsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiUsersByIdResponses, GetApiUsersByIdErrors, ThrowOnError>({
        url: '/api/users/{id}',
        ...options
    });
};

/**
 * Update a user
 */
export const patchApiUsersById = <ThrowOnError extends boolean = false>(options: Options<PatchApiUsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchApiUsersByIdResponses, PatchApiUsersByIdErrors, ThrowOnError>({
        url: '/api/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List all books
 */
export const getApiBooks = <ThrowOnError extends boolean = false>(options?: Options<GetApiBooksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiBooksResponses, unknown, ThrowOnError>({
        url: '/api/books',
        ...options
    });
};

/**
 * Add a new book
 */
export const postApiBooks = <ThrowOnError extends boolean = false>(options: Options<PostApiBooksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiBooksResponses, PostApiBooksErrors, ThrowOnError>({
        url: '/api/books',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get a book by ID
 */
export const getApiBooksById = <ThrowOnError extends boolean = false>(options: Options<GetApiBooksByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiBooksByIdResponses, GetApiBooksByIdErrors, ThrowOnError>({
        url: '/api/books/{id}',
        ...options
    });
};

/**
 * Borrow a book
 */
export const postApiBooksByIdBorrow = <ThrowOnError extends boolean = false>(options: Options<PostApiBooksByIdBorrowData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiBooksByIdBorrowResponses, PostApiBooksByIdBorrowErrors, ThrowOnError>({
        url: '/api/books/{id}/borrow',
        ...options
    });
};

/**
 * Return a book
 */
export const postApiBooksByIdReturn = <ThrowOnError extends boolean = false>(options: Options<PostApiBooksByIdReturnData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiBooksByIdReturnResponses, PostApiBooksByIdReturnErrors, ThrowOnError>({
        url: '/api/books/{id}/return',
        ...options
    });
};

/**
 * Start a new development server
 * Creates a new development server instance with VSCode and worker services for running tasks
 */
export const postApiDevServerStart = <ThrowOnError extends boolean = false>(options: Options<PostApiDevServerStartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiDevServerStartResponses, PostApiDevServerStartErrors, ThrowOnError>({
        url: '/api/dev-server/start',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List repos per GitHub App installation for a team
 */
export const getApiIntegrationsGithubRepos = <ThrowOnError extends boolean = false>(options: Options<GetApiIntegrationsGithubReposData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiIntegrationsGithubReposResponses, GetApiIntegrationsGithubReposErrors, ThrowOnError>({
        url: '/api/integrations/github/repos',
        ...options
    });
};

/**
 * Setup a Morph instance with optional repository cloning
 */
export const postApiMorphSetupInstance = <ThrowOnError extends boolean = false>(options?: Options<PostApiMorphSetupInstanceData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiMorphSetupInstanceResponses, PostApiMorphSetupInstanceErrors, ThrowOnError>({
        url: '/api/morph/setup-instance',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List environments for a team
 */
export const getApiEnvironments = <ThrowOnError extends boolean = false>(options: Options<GetApiEnvironmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiEnvironmentsResponses, GetApiEnvironmentsErrors, ThrowOnError>({
        url: '/api/environments',
        ...options
    });
};

/**
 * Create a new environment with snapshot
 */
export const postApiEnvironments = <ThrowOnError extends boolean = false>(options?: Options<PostApiEnvironmentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiEnvironmentsResponses, PostApiEnvironmentsErrors, ThrowOnError>({
        url: '/api/environments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete an environment
 */
export const deleteApiEnvironmentsById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiEnvironmentsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiEnvironmentsByIdResponses, DeleteApiEnvironmentsByIdErrors, ThrowOnError>({
        url: '/api/environments/{id}',
        ...options
    });
};

/**
 * Get a specific environment
 */
export const getApiEnvironmentsById = <ThrowOnError extends boolean = false>(options: Options<GetApiEnvironmentsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiEnvironmentsByIdResponses, GetApiEnvironmentsByIdErrors, ThrowOnError>({
        url: '/api/environments/{id}',
        ...options
    });
};

/**
 * Get environment variables for a specific environment
 */
export const getApiEnvironmentsByIdVars = <ThrowOnError extends boolean = false>(options: Options<GetApiEnvironmentsByIdVarsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiEnvironmentsByIdVarsResponses, GetApiEnvironmentsByIdVarsErrors, ThrowOnError>({
        url: '/api/environments/{id}/vars',
        ...options
    });
};